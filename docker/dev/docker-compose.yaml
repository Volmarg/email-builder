services:
  easy_email:
    container_name: easy-email-dev

    # that's the only way to run the dev server and keep container alive
    # However this will make the GUI reachable under some strange IP, to get the IP call the `docker logs`
    # to see the output of the npm dev server
    # yarn & npm packages must be handled in here, not in dockerfile as the composer.json is not yet available at that point
    entrypoint: sh -c "./docker/entrypoint.sh && npm i && cd demo && npm i && cd ../ && exec npm run dev"

    # Start the container every time that pc is restarted
    restart: always

    # will automatically go to this folder when entering the container in interactive mode (exec -it bash)
    working_dir: /var/www/html

    # this is needed to let the docker access the HOST data, for example MYSQL or some HOST api
    extra_hosts:
      - "host.docker.internal:host-gateway"

    # without this the container starts and exits, this is a must to keep the container alive
    tty: true

    # image used to create this container
    build:
      context: ../
      dockerfile: ./dockerfile

    # port on which will this project be locally available
    ports:
      - "3000:80"

    networks:
      easy-email-dev:
        ipv4_address: 11.8.1.6

    volumes:
      # map the local project root dir to the folder in docker
      - ../../:/var/www/html

networks:
  easy-email-dev:
    driver: bridge
    ipam:
      config:
        - subnet: 11.8.0.0/16
          gateway: 11.8.1.1